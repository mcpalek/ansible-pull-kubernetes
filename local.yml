---
- hosts: localhost
  connection: local
  become: true
  tasks:
    - name: install helm if it does not exist
      unarchive:
        src: https://get.helm.sh/{{ helm_version }}
        dest: /usr/local/bin
        extra_opts: --strip-components=1
        owner: root
        group: root
        mode: 755
        remote_src: true
      args:
        creates: /usr/local/bin/helm
    - name: Update all Debian/Ubuntu packages to their latest version
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
        name: "*"
        state: latest
      when:
        - ansible_distribution in ["Debian", "Ubuntu"]
    - name: Update all RedHat/CentOs/Rocky packages to their latest version
      ansible.builtin.dnf:
        update_cache: true
        name: "*"
        state: latest
      when:
        - ansible_distribution in ["Rocky", "CentOs" ,"RedHat"]
    - name: Remove podman
      shell: |
        dnf remove podman.x86_64 -y
        dnf autoremove -y
      when:
        - ansible_distribution in ["Rocky", "CentOs" ,"RedHat"]
    - name: Uninstall old Docker versions
      dnf:
        name:
          - docker-client
          - docker-client-latest
          - docker-common
          - docker-latest
          - docker-latest-logrotate
          - docker-logrotate
          - docker-engine
        state: absent
      when:
        - ansible_distribution in ["Rocky", "CentOs" ,"RedHat"]

    - name: Set up docker repository for Rocky
      shell: >
        dnf install -y yum-utils

        yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      when:
        - ansible_distribution in ["Rocky", "CentOs" ,"RedHat"]
    - name: Set up docker repository for Ubuntu
      shell: >
        apt install -y curl gnupg2 software-properties-common apt-transport-https
        ca-certificates 

        curl -fsSL  https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 

        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
      when:
        - ansible_distribution in ["Debian", "Ubuntu"]
    - name: Install the latest version of Docker Engine and containerd on all OS
      package:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
   # - name: create docker directory
    #  shell: sudo mkdir -p /etc/systemd/system/docker.service.d
    #- name: Create daemon json config file
    #  shell: |
     #   sudo tee /etc/docker/daemon.json <<EOF
      #   {
       #   "exec-opts": ["native.cgroupdriver=systemd"],
        #  "log-driver": "json-file",
         #  "log-opts": {
        #  "max-size": "100m"
         # },
          # "storage-driver": "overlay2"
         # }
          # EOF
    - name: Start and enable docker
      systemd:
        name: docker
        state: started
        enabled: yes
    - name: Disable SELinux
      selinux:
        state: disabled
      when:
        - ansible_distribution in ["Rocky", "CentOs" ,"RedHat"]
    - name: Add kubernetes Repo to RedHat/CentOs/Rocky
      shell: >
        cat <<EOF > /etc/yum.repos.d/kubernetes.repo

        [kubernetes]

        name=Kubernetes

        baseurl=https://pkgs.k8s.io/core:/stable:/{{ repo_version }}/rpm/

        enabled=1

        gpgcheck=1

        gpgkey=https://pkgs.k8s.io/core:/stable:/{{ repo_version }}/rpm/repodata/repomd.xml.key

        exclude=kubelet kubeadm kubectl cri-tools kubernetes-cni
      when:
        - ansible_distribution in ["Rocky", "CentOs" ,"RedHat"]
    - name: Upgrade all packages
      yum: name=* state=latest
      when:
        - ansible_distribution in ["Rocky", "CentOs" ,"RedHat"]
    - name: Install Kubernetes Package
      shell: >
        dnf install -y kubelet-{{ rocky_kubernetes_version }} kubeadm-{{
        rocky_kubernetes_version }} kubectl-{{ rocky_kubernetes_version }}
        --disableexcludes=kubernetes

        dnf install containerd.io

        sudo systemctl enable --now kubelet

        sudo containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1

        sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

        rm /etc/containerd/config.toml

        systemctl restart containerd
      when:
        - ansible_distribution in ["Rocky", "CentOs" ,"RedHat"]
    - name: DisaBle Firewall
      shell: |
        sudo systemctl stop firewalld
        sudo systemctl disable firewalld
      when:
        - ansible_distribution in ["Rocky", "CentOs" ,"RedHat"]
    - name: Add kubernetes Repo to Debian/Ubuntu
      shell: >
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo
        apt-key add -

        echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

        apt update    
      when:
        - ansible_distribution in ["Debian", "Ubuntu"]
    - name: Install kubernetes on Debian/Ubuntu
      shell: apt install -y kubelet={{ ubuntu_kubernetes_version }} kubeadm={{
        ubuntu_kubernetes_version }} kubectl={{ ubuntu_kubernetes_version }}
      when:
        - ansible_distribution in ["Debian", "Ubuntu"]
    - name: Disable Swap
      shell: |
        sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
        sudo swapoff -a
    - name: enable kernel modules
      shell: |
        sudo modprobe overlay
        sudo modprobe br_netfilter 
    - name: add settings to syscontrol
      shell: |
        sudo tee /etc/sysctl.d/kubernetes.conf<<EOF
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1
        EOF
    - name: restart sysctl
      shell: sudo sysctl --system
    - name: before init
      shell: |
        sudo systemctl daemon-reload 
        sudo systemctl restart docker
        sudo systemctl enable docker
        lsmod | grep br_netfilter
        sudo systemctl enable kubelet
        sudo kubeadm config images pull
        sudo containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
        sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
        #sudo rm /etc/containerd/config.toml
        systemctl restart containerd
      when:
        - ansible_distribution in ["Debian", "Ubuntu"]
    

    - name: Initialize Kubernetes 
      shell: |
        sudo kubeadm init --apiserver-advertise-address={{ ansible_default_ipv4.address }} --control-plane-endpoint={{ ansible_default_ipv4.address }} --apiserver-cert-extra-sans={{ ansible_default_ipv4.address }} --pod-network-cidr=172.16.0.0/16 --upload-certs 
    - name: create konfig folder
      shell: 
        path {{ ansible_env.HOME }}/.kube state: directory
        owner: root
        group: root
        mode: '0644'
    - name: copy konfig to .kube folder
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: $HOME/.kube/config
    - name: change ownership of the .kube folder
      shell: sudo chown $(id -u):$(id -g) $HOME/.kube/config    
    - name: remove taints
      shell: |
        kubectl taint nodes --all node-role.kubernetes.io/control-plane-
        #kubectl taint nodes --all node-role.kubernetes.io/master-
    - name: INstall Calico
      shell: |
        curl https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml -O
        kubectl apply -f calico.yaml
